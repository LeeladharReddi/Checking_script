#!/python38-env/bin/python

DESCRIPTION="This script pulls the related tickets for a CI like incidents, changes, ritms"
BUG_REPORT_EMAIL="chetan.sriram@thomsonreuters.com"

######################################################################
# Author - Chetan Sriram
######################################################################
#
# v1.0 - 2024/2 - Chetan Sriram
#      Initial release
#
# v1.1 - 2024/07/01 - Leeladhar Reddy
#      Improved script to execute on only when on OS version (RHEL7.4 to RHEL7.9) & server state should be Commissioned or build complete. 
#      Added service-now records check for server
#      Enhanced LD1 work method. If LD1 failed it shows /root, /var, /home & /perf size 
#      Added proxy check under environment
#      Added symbolic check which are under "/" file system (only on /MP2LS, /ip, /data01, /authortoolkit & /pace)
#      Improved script to store inplace_cc_checks logs in server (under /var/tmp/)

import apikeys3
import json
import requests
import sys
from datetime import datetime, timedelta
import argparse
import os
import re
from termcolor import colored
from operator import itemgetter
import subprocess
import datetime as dt

# Setting proxy since SN is not reachable directly.
http_proxy = "http://webproxy.msp.mgmt.services:80"
https_proxy = "http://webproxy.msp.mgmt.services:80"
proxyDict = {"http": http_proxy, "https": http_proxy}

payload = {}
headers = {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer your-access-token'  # Replace with your API token or authorization method
}

def run_on_server(server, cmd):
    cmd = f"ssh -o 'StrictHostKeyChecking no' -q root@{server} \"{cmd}\""
    q = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = q.communicate()
    output = output.decode('utf-8')
    return output

# Parse a size string and return the size in GB        
def parse_size(size_str):
    if size_str.endswith('G'):
        return float(size_str.rstrip('G'))
    elif size_str.endswith('M'):
        return float(size_str.rstrip('M')) / 1024  # Convert MB to GB
    elif size_str.isdigit():
        return float(size_str)  # Assuming no unit means GB
    else:
        raise ValueError(f"Unknown size unit in '{size_str}'")   

def get_patch_status(server):
    url = f"https://pmi.int.thomsonreuters.com/api/v3/jobs?ci={server}&sort=start:desc"
    details = requests.get(url).json()
    no_status = "No patch status found for the server"
    if details:
        return details[0]['start'], details[0]['status']
    else:
        return None
    
def run_on_automation(smart_cmd):
    cmd = f"ssh -o 'StrictHostKeyChecking no' -q automation-msp-mgmt {smart_cmd}"
    q = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    output, error = q.communicate()
    output = output.decode('utf-8')
    return output 

# Used to store the sys_id of server
sys_id_str = ""
sys_ids = []

def get_server_records(server):
    for id in sys_ids:
        url = f"https://thomsonreuters.service-now.com/api/now/table/cmdb_ci_linux_server/{id}"
        response = requests.get(url, auth=(apikeys3.snow_usr, apikeys3.snow_pwd), headers=headers, proxies=proxyDict)
        if response.status_code == 200:
            json_data = response.json()
            if json_data and 'result' in json_data:
                result = json_data['result']
                start = result.get('start')
                status = result.get('status')
                environment = result.get('environment')
                operational_status = result.get('operational_status')
                os_version = result.get('os_version')
                #print(f"Retrieved operational_status: {operational_status}")  # Add this line for debugging
                return start, status, environment, operational_status, os_version
            else:
                return None
        else:
            print(colored(f"Failed to fetch server records. Status code: {response.status_code}", "red"))
            return None         

if __name__ == "__main__":
    try:
        if len(sys.argv) != 2:
            print("Usage: python script.py <server_list_file>")
            sys.exit(1)
        server_list_file = sys.argv[1]

        with open(server_list_file, "r") as file:
            # Read all lines from the file
            server_list = file.readlines()
            server_list = [server.strip() for server in server_list if server.strip()]

            for server in server_list:
                # Fetch the current time from the server
                server_time_cmd = "date -u +'%Y-%m-%dT%H:%M'"
                server_time = run_on_server(server, server_time_cmd).strip()

                print(f"\nPerforming In-place CC checks on {server}")
                print(50 * '-')

                #Clear data everytime to print next log
                results = []

                remote_file = f"/var/tmp/in-place_checks_{server}_{server_time}.log"  # Path to the file on the remote server
                create_file_cmd = f"touch {remote_file}"
                run_on_server(server, create_file_cmd)

                # Checking CI records in service-now.
                try:
                    sys_id_str = subprocess.check_output(f'/infra_unixsvcs/unix-support/bin/snowquery.py -e -j -z -n -f sys_id -t ci {server} | grep "sys_id"', shell=True)
                    sys_id_str = sys_id_str.decode('utf-8').replace(',', "").replace('"', '').replace('sys_id:', '')
                except subprocess.CalledProcessError as e:
                    result = colored(f"\nThe CI is not having records in service-now. Please check & enter correct server........\n", "red")
                    print(result)
                    results.append(result)
                    continue  # Skip to the next server

                sys_ids.clear()  # Clear sys_ids for the new server
                for sys_id in sys_id_str.splitlines():
                    sys_ids.append(sys_id.strip())

                ci_records = get_server_records(server)
                if ci_records:
                    start, status, environment, operational_status, os_version = ci_records
                    try:
                        #Script execute only if servers in Commissioned/Build complete & if server are RHEL7.4/7.5/7.6/7.7/7.8/7.9
                        operational_status = int(operational_status)
                        allowed_versions = ['7.4', '7.5', '7.6', '7.7', '7.8', '7.9']

                        if operational_status in [10, 7] and str(os_version) in allowed_versions:
                            status_meaning = {
                                10: 'Commissioned',
                                7: 'Build complete',
                            }
                            result = colored(f"\nOperational Status for {server}: {operational_status} - {status_meaning[operational_status]} - PASS\n", 'green')
                            print(result)
                            results.append(result)
                            result = colored(f"CI is having proper ServiceNow records. Environment: {environment} & RHEL:{os_version}", 'green')
                            print(result)
                            results.append(result)

                            ld1_cmd = "lsblk -o NAME,SIZE | grep '^sda'| awk '{print $2}' | grep -o '[0-9]*'"
                            ld1_cmd_root = "df -h /"
                            ld1_cmd_var = "df -h /var"
                            ld1_cmd_home = "df -h /home"
                            ld1_cmd_perf = "df -h /perf"
                            nfs_cmd = "grep -v '^#' /etc/fstab | grep nfs"
                            ol_cmd = "rpm -qa --qf '%{NAME} %{VENDOR}\\n' | grep 'Oracle America' | cut -d' ' -f1"
                            nodejs_cmd = "rpm -qa | grep nodejs"
                            nodejs_cmd = "rpm -qa | grep nodejs"
                            iwl_cmd = "rpm -qa | grep -E 'iwl7260|iwlax2xx'"
                            proxy_check_cmd = "env | grep -i proxy"
                            sym_link_cmd = "ls -ld /MP2LS /ip /data01 /authortoolkit /pace"
                            software_dep_cmd = f"smartservice.py list -s {server} | egrep CURRENT.*linux_software_deployment"
                            central_auth_cmd = f"smartservice.py list -s {server} | egrep CURRENT.*linux_central_authentication"
                            deam_cmd = f"smartservice.py list -s {server} | egrep CURRENT.*linux_data_encryption_agent_management"
                            eosl_cmd = f"smartservice.py list -s {server} | egrep CURRENT | awk '{{print $6}}'"
                            console_cmd = f"/infra_unixsvcs/unix-support/bin/console.py {server}"

                            # Checking LD1 size
                            ld_size = run_on_server(server, ld1_cmd)
                            ld_size_list = ld_size.strip().split()
                            ld_size_list = [parse_size(size) for size in ld_size_list]
                            ld_size = ld_size_list[0] if ld_size_list else 0

                            ld_size_root = run_on_server(server, ld1_cmd_root)
                            match = re.search(r'/dev/mapper/\S+\s+(\d+(?:\.\d+)?[MG]?)\s+', ld_size_root)
                            root_fs_size_clean = parse_size(match.group(1)) if match else 0

                            ld_size_var = run_on_server(server, ld1_cmd_var)
                            match = re.search(r'/dev/mapper/\S+\s+(\d+(?:\.\d+)?[MG]?)\s+', ld_size_var)
                            var_fs_size_clean = parse_size(match.group(1)) if match else 0

                            ld_size_home = run_on_server(server, ld1_cmd_home)
                            match = re.search(r'/dev/mapper/\S+\s+(\d+(?:\.\d+)?[MG]?)\s+', ld_size_home)
                            home_fs_size_clean = parse_size(match.group(1)) if match else 0

                            ld_size_perf = run_on_server(server, ld1_cmd_perf)
                            match = re.search(r'/dev/mapper/\S+\s+(\d+(?:\.\d+)?[MG]?)\s+', ld_size_perf)
                            perf_fs_size_clean = parse_size(match.group(1)) if match else 0

                            if ld_size == 15:
                                result = colored(f"LD1 size is 15GB - PASS", 'green')
                                print(result)
                            else:
                                result = colored(f"\nLD1 size is {ld_size}GB - FAIL", 'red')
                                print(result)
                            results.append(result)

                            if root_fs_size_clean != 7.1:
                                result = colored(f"/root file system size is {root_fs_size_clean}GB ", 'yellow')
                                print(result)
                                results.append(result)
                            if var_fs_size_clean != 4:
                                result = colored(f"/var file system size is  {var_fs_size_clean}GB", 'yellow')
                                print(result)
                                results.append(result)
                            if perf_fs_size_clean != 497:
                                result = colored(f"/Perf file system size is {perf_fs_size_clean}GB", 'yellow')
                                print(result)
                                results.append(result)

                            # Checking NFS
                            nfs_entries = run_on_server(server, nfs_cmd)
                            if nfs_entries:
                                result = colored(f"\nNFS entries exist in /etc/fstab - FAIL\n", 'red')
                                print(result)
                                results.append(result)
                            else:
                                result = colored("\nNo NFS entries in /etc/fstab file - PASS\n", 'green')
                                print(result)
                                results.append(result)

                            # Checking OL packages
                            olpkg_result = run_on_server(server, ol_cmd)
                            if not olpkg_result:
                                result = colored("No Oracle Linux packages exist on the server - PASS\n", 'green')
                                print(result)
                                results.append(result)
                            else:
                                result = colored("Oracle Linux packages exist on the server - FAIL\n", 'red')
                                print(result)
                                result = ("""https://trten.sharepoint.com/sites/intr-plat-eng/SitePages/Oracle-Linux-to-Red-Hat-Linux-Conversion-Tool-Guide.aspx\n""")
                                print(result)
                                results.append(result)

                            # Checking any Nodejs packages
                            nodejs = run_on_server(server, nodejs_cmd)
                            if not nodejs:
                                result = colored("No Nodejs packages exist on the server - PASS\n", 'green')
                                print(result)
                                results.append(result)
                            else:
                                result = colored("Nodejs packages exist on the server - FAIL", 'red')
                                print(result)
                                results.append(result)

                            #Checking iwl packages.
                            iwl = run_on_server(server,iwl_cmd)
                            if iwl:
                                lines = iwl.strip().split('\n')
                                found_packages = [line.split('-')[0] for line in lines]
                                if len(found_packages) == 1 and 'iwl7260' in found_packages:
                                    result = colored("IWL package check  -  PASS\n", 'green')
                                    print(result)
                                    results.append(result)
                            elif len(found_packages) > 1 and 'iwlax2xx' in found_packages:
                                result = colored("IWL package check : iwlax2xx found on the server. Remove it - FAIL\n", 'red')
                                print(result)
                                results.append(result)

                            # Checking proxy (#proxy, error = run_on_server(server, proxy_check))
                            proxy = run_on_server(server, proxy_check_cmd)
                            if not proxy:
                                result = colored("No proxy exists on the server - PASS\n", 'green')
                                print(result)
                                results.append(result)
                            #elif error:
                                #print(colored(f"Error connecting to server {server}: {error}\n", 'red'))
                            else:
                                result = colored("Proxy exists on the server - FAIL", 'red')
                                print(result)
                                results.append(result)
                                result = colored(f"Available proxy details:", 'yellow')
                                print(result)
                                results.append(result)
                                result = colored(f"{proxy.strip()}\n", 'yellow')
                                print(result)
                                results.append(result)

                            #Checking symbolic links exist in root or not
                            symbolic_link = run_on_server(server, sym_link_cmd)
                            if not symbolic_link:
                                result = colored("No symbolic link exists on the server under root file system - PASS\n", 'green')
                                print(result)
                                results.append(result)
                            else:
                                result = colored("Symbolic link exists on the server under root file system - FAIL", 'red')
                                print(result)
                                results.append(result)
                                result = colored(f"Available Symbolic links details:", 'yellow')
                                print(result)
                                results.append(result)
                                result = colored(f"{symbolic_link.strip()}\n", 'yellow')
                                print(result)
                                results.append(result)

                            #Checking latest patching
                            result = get_patch_status(server)
                            if result is not None:
                                time, status = result
                                if status == 'succeeded':
                                    result = colored(f"Latest PM3 status {status} on {time} - PASS\n", 'green')
                                    print(result)
                                    results.append(result)
                                else:
                                    result = colored(f"Latest PM3 status {status} on {time} - FAIL\n", 'red')
                                    print(result)
                                    results.append(result)
                            else:
                                result = colored("No patch status found for the server\n", 'red')
                                print(result)
                                results.append(result)

                            #Checking Cental Authentication above v1.5
                            central_auth = run_on_automation(central_auth_cmd)
                            if central_auth:
                                output = central_auth.split()
                            version = float(output[4])
                            if version >= 1.5:
                                result = colored(f"Cental Authentication is at {version} - PASS\n", 'green')
                                print(result)
                                results.append(result)
                            elif version < 1.5:
                                result = colored(f"Cental Authentication is at {version} - FAIL\n", 'red')
                                print(result)
                                results.append(result)
                            else:
                                result = colored(f"Central authentication is not subscribed for the server - FAIL\n", 'red')
                                print(result)
                                results.append(result)

                            #Checking Software deployment above v2.11
                            software_dep = run_on_automation(software_dep_cmd)
                            if software_dep:
                                output = software_dep.split()
                                version = float(output[4])
                                if version >= 2.11:
                                    result = colored(colored(f"Software deployment is at {version} - PASS\n", 'green'))
                                    print(result)
                                    results.append(result)
                                elif version < 2.11:
                                    result = colored(colored(f"Software deployment is at {version} - FAIL\n", 'red'))
                                    print(result)
                                    results.append(result)
                            else:
                                result = colored("Software Deployment is not subscribed for the server")
                                print(result)
                                results.append(result)

                            #Checking any DEAM services
                            deam = run_on_automation(deam_cmd)
                            if deam:
                                result = colored("DEAM is subscribed - FAIL\n", 'red')
                                print(result)
                                results.append(result)
                            else:
                                result = colored("DEAM is not subscribed - PASS\n", 'green')
                                print(result)
                                results.append(result)

                            #Checking any EOSL services
                            eosl_output = run_on_automation(eosl_cmd)
                            if eosl_output:
                                if 'EOSL' in eosl_output or 'eosl' in eosl_output:
                                    result = colored(f"EOSL subscriptions exist - FAIL\n", 'red')
                                    print(result)
                                    results.append(result)
                                else:
                                    result = colored(f"EOSL subscriptions does not exist - PASS\n", 'green')
                                    print(result)
                                    results.append(result)

                            #Checking ESXi compatibility
                            result = colored('Disclaimer: Manually check the ESXi compatibility for the servers as there is no automated mechanism yet.','yellow')
                            print(result)
                            results.append(result)   

                            #Collecting console details of the server
                            console_process = subprocess.Popen(console_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                            console_output, console_error = console_process.communicate()
                            console_output = console_output.decode('utf-8')  # Decode the byte output to string
                            console_error = console_error.decode('utf-8')
                            result = (console_output)  
                            print(result)
                            results.append(result) 

                        #Script failes if servers are Decom/Pending Decom/Installed/Pending use & id RHEL8+ 
                        else:
                            status_meaning = {
                                10: 'Commissioned',
                                9: 'Decommissioned',
                                8: 'Pending Decommission',
                                7: 'Build complete',
                                6: 'Installed',
                                5: 'Pending Use'
                                }
                            if operational_status in [9, 8, 6, 5]:
                                reason = f"Operational Status: {status_meaning[operational_status]}"
                            else:
                                reason = f"OS Version: {os_version}"
                                result = colored(f"\nOperational Status for {server}: {operational_status} - {status_meaning[operational_status]}  & Environment: {environment} & RHEL:{os_version}", 'red')
                                print(result)
                                results.append(result)
                                result = colored(f"Server is not eligible for in-place upgrade \n", 'red')
                                print(result)
                                results.append(result)

                    except ValueError as ve:
                        result = colored(f"\nOperational Status is not a valid number for {server}. Error: {ve}", 'red')
                        print(result)
                        results.append(result)
                else:
                    result = colored(f"\nCI is not having proper ServiceNow records for {server}. Please do check CI records manually - FAIL\n", 'red')
                    print(result)
                    results.append(result)

                # Write results to the checks output data in remote server file
                for result in results:
                    write_cmd = f"echo '{result}' >> {remote_file}"
                    run_on_server(server, write_cmd)

    except KeyboardInterrupt:
        # Code to be stopped when Ctrl+C is pressed
        print("\nUser interrupt detected. Script execution is stopped\n")
